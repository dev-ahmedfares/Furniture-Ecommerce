import type { Metadata } from "next";
import { DM_Sans, Inter, Montserrat, Rubik } from "next/font/google";
import "./../globals.css";
import localFont from "next/font/local";
import { ThemeProvider } from "@/components/shared/ThemeProvider";
import QueryProvider from "@/components/QueryProvider";
import ReduxProvider from "@/components/ReduxProvider";
import { SessionProvider } from "next-auth/react";
import AuthContext from "@/context/AuthContext";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { routing } from "@/i18n/routing";
import { notFound } from "next/navigation";
import { Suspense } from "react";
import { Spinner } from "@/components/shared/Spinner";

const mont = Montserrat({
  weight: ["300", "400", "500", "600", "700", "800"],
  variable: "--font-mont",
  subsets: ["latin"],
});

const rubik = Rubik({
  variable: "--font-rubik",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});
const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

const dmSans = DM_Sans({
  variable: "--font-dmSans",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

const gilroy = localFont({
  src: [
    {
      path: "../../public/fonts/Gilroy-Light.ttf",
      weight: "300",
      style: "normal",
    },
    {
      path: "../../public/fonts/Gilroy-Regular.ttf",
      weight: "400",
      style: "normal",
    },
    {
      path: "../../public/fonts/Gilroy-Medium.ttf",
      weight: "500",
      style: "normal",
    },
    {
      path: "../../public/fonts/Gilroy-SemiBold.ttf",
      weight: "600",
      style: "normal",
    },
    {
      path: "../../public/fonts/Gilroy-Bold.ttf",
      weight: "700",
      style: "normal",
    },
    {
      path: "../../public/fonts/Gilroy-ExtraBold.ttf",
      weight: "800",
      style: "normal",
    },
  ],
  variable: "--font-gilroy",
});

const agency = localFont({
  src: [
    { path: "../../public/fonts/Agency.ttf", weight: "400", style: "normal" },
  ],
  variable: "--font-agency",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  const { locale } = await params;
  const messages = await getMessages();

  // Ensure that the incoming locale is valid
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }
  const direction = locale === "ar" ? "rtl" : "ltr";
  return (
    <html lang={locale} dir={direction} suppressHydrationWarning>
      <body
        className={`${rubik.variable} ${inter.variable} ${dmSans.variable} ${mont.variable} ${gilroy.variable} ${agency.variable}`}
      >
        <NextIntlClientProvider messages={messages}>
          <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
            <QueryProvider>
              <SessionProvider>
                <ReduxProvider>
                  <AuthContext>
                    <Suspense
                      fallback={
                        <div className="bg-light-100 dark:bg-dark-100 flex h-screen flex-col items-center justify-center">
                          <p className="text-dark100_light900   flex items-center justify-center gap-1">
                            <span><Spinner size={"small"} /></span>
                            <span>{locale === "en"? "Loading..." : "جاري التحميل..."}</span>
                          </p>
                        </div>
                      }
                    >
                      {children}{" "}
                    </Suspense>
                  </AuthContext>
                </ReduxProvider>
              </SessionProvider>
            </QueryProvider>
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
